const { isApplicationCommandDMInteraction } = require('discord-api-types/utils/v9');
const Discord = require('discord.js'),
    config = require('./config.json');
const { ActionRowBuilder, ButtonBuilder, ButtonStyle, Events, SelectMenuBuilder, TextInputStyle, EmbedBuilder, messageEmbed, codeBlock } = require('discord.js');
const { Client, GatewayIntentBits } = require('discord.js');                                     
const bot = new Client({ intents: [GatewayIntentBits.Guilds, GatewayIntentBits.GuildMessages, GatewayIntentBits.MessageContent, GatewayIntentBits.GuildMembers, GatewayIntentBits.GuildMessageReactions] });   
const { ContextMenuCommandBuilder, ApplicationCommandType, TextInputBuilder } = require('discord.js');                            
const { channel } = require('diagnostics_channel');
const info = require('./package.json');
const fs = require('fs');
const LogChannel = bot.channels.cache.get('1073923196664950785')
bot.login(config.token);                                                                   

let commands = {} 

bot.on('ready', (Client)=>{                                                                         
    console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');
    fs.readdirSync("commands").forEach(el => {
        if (el.endsWith(".js")) {
            let command = require(`./commands/${el}`)
                if (command.info) commands[command.info.name] = command
        }
    })
    bot.guilds.cache.forEach(guild => bot.application.commands.set(
        Object.values(commands).map(command => command.info)//, guild.id
    ))

const count = bot.guilds.cache.size
bot.user.setActivity(`–°–º–æ—Ç—Ä—é –Ω–∞ ${count} —Å–µ—Ä–≤–µ—Ä–æ–≤`),
bot.user.setPresence({status: 'idle'})
})

process.on('uncaughtException', async(error) => {
    console.error(error)
});

bot.on('guildCreate', async guild => {
    const serverAddLog = new EmbedBuilder()
    .setTitle("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä")
    .setDescription(`–Ø –±—ã–ª —Ç–æ–ª—å–∫–æ —á—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º: ${guild.name}\n–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞: ${guild.memberCount}.\n\n–í—Å–µ–≥–æ —Ç–µ–ø–µ—Ä—å —É –º–µ–Ω—è —Å–µ—Ä–≤–µ—Ä–æ–≤: ${bot.guilds.cache.size}`)
    .setColor(0x7FFF00)
    .setTimestamp()

    LogChannel.send({embeds: [serverAddLog]})
    const count = bot.guilds.cache.size
    bot.user.setActivity(`–°–º–æ—Ç—Ä—é –Ω–∞ ${count} —Å–µ—Ä–≤–µ—Ä–æ–≤`)
})

bot.on('guildDelete', guild => {
    const serverDeleteLog = new EmbedBuilder()
    .setTitle("–£–¥–∞–ª–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–∞")
    .setDescription(`–Ø –±—ã–ª –∫–∏–∫–Ω—É—Ç —Å —Å–µ—Ä–≤–µ—Ä–∞ ${guild.name}\n–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞: ${guild.memberCount}\n\n–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ä–≤–µ—Ä–æ–≤ —Ç–µ–ø–µ—Ä—å: ${bot.guilds.cache.size}`)
    .setColor(0xDC143C)
    .setTimestamp()

    const LogChannel = bot.channels.cache.get('1073923196664950785')
    LogChannel.send({embeds: [serverDeleteLog]})
    const count = bot.guilds.cache.size
    bot.user.setActivity(`–°–º–æ—Ç—Ä—é –Ω–∞ ${count} —Å–µ—Ä–≤–µ—Ä–æ–≤`)
})

bot.on('interactionCreate', async (interaction) => {
    if (interaction.isCommand()) {
        let command = commands[interaction.commandName]
        if (command) await command.run(bot, interaction)
    } else if (interaction.isButton()) {
        if (interaction.customId === 'primary') interaction.reply({content: '—Ç–µ—Å—Ç'})
    } else if (interaction.isSelectMenu()) {
        const selected = interaction.values[0];
        if (selected === 'first_option') await interaction.update(`${interaction.user.username}, —Ç—ã –≤—ã–±—Ä–∞–ª –ø—Ç–∏—Ü—É –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è!`) 
        else if (selected === 'second_option') await interaction.update(`${interaction.user.username}, —Ç–µ–±–µ –Ω—Ä–∞–≤—è—Ç—Å—è –æ–±–µ –ø–∞–ª–æ—á–∫–∏ —Ç–≤–∏–∫—Å. –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!`) 
        else if (selected === 'third_option') await interaction.update(`${interaction.user.username}, —ç—Ç–æ –Ω–µ –≤—ã–±–æ—Ä, –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∏–∂–µ.`) 
        else if (selected === 'fourth_option') await interaction.update(`${interaction.user.username}, —Ç—ã –≤—ã–±—Ä–∞–ª –ø–∏–∫–∏. –¢–µ–±—è –∑–∞—Ä–µ–∑–∞–ª–∏ –¥–æ –ø–æ—Ç–µ—Ä–∏ —Å–æ–∑–Ω–∞–Ω–∏—èüíÄ`)
        else if (selected === 'fifth_option') await interaction.update(`${interaction.user.username}, —Ç—ã –≤—ã–±—Ä–∞–ª –ø–∏—Å—é–ª—é –¥—Ä–æ—á—ë–Ω—É—é. –¢–≤–æ–π –∞–Ω—É—Å —Ä–∞—Å—à–∏—Ä–∏–ª—Å—è –Ω–∞ 20—Å–º. ||–£ —Ä–∞–∑—Ä–∞–±–æ–≤ –±–æ—Ç–æ–≤ –Ω–∞ –î–ñ–° —Ç–∞–∫–æ–µ-–∂–µ –¥—É–ø–ª–æüòâ||`)
    } /*else if (interaction.isModalSubmit()) {
        if (interaction.customId === 'myModal') interaction.reply({content: 'zalupa'})
        const favoriteColor = interaction.fields.getTextInputValue('favoriteColorInput');
        const hobbies = interaction.fields.getTextInputValue('hobbiesInput');
        console.log(`–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã test-modals\n–û—Ç–≤–µ—Ç—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${interaction.user.username}\n–õ—é–±–∏–º—ã–π —Ü–≤–µ—Ç: ${favoriteColor}, –ª—é–±–∏–º–æ–µ —Ö–æ–±–±–∏: ${hobbies}`);

    }*/
})

.on('messageCreate', async (message) => {
    if(message.author.bot) return;

    else if(message.content.split(' ')[0] == '!eval') {
        if (!['521275527936606208', '853937919601016833', '663378999103324180', '456330254093385730'].includes(message.author.id)) return message.reply({ content: '–¢—ã –Ω–µ –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É!' });
        const util = require('util');
        let code = message.content.split(' ').splice(1).join(' ') || null;
        let isAsync = false;

        try {
            if(!code) return message.reply({ content: '–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å!', ephemeral: true });
            code = code.replace(/(```(.+)?)?/g, '');
            if(code.includes('await')) isAsync = true;
            if(isAsync) code = `(async () => {${code}})()`;
            let executed = eval(code);
            if(util.types.isPromise(executed)) executed = await executed;
            if(typeof executed !== 'string') executed = util.inspect(executed, { depth: 0, maxArrayLength: null });
            if(executed.length >= 1940) {
                message.reply({ content: '–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–∫–∞–∑–∞–ª—Å—è —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–º, –ø–æ—ç—Ç–æ–º—É —è –æ—Ç–ø—Ä–∞–≤–∏–ª –µ–≥–æ —Ç–µ–±–µ –≤ –ª–∏—á–∫—É.' });
                return message.author.send({ content: `\`\`\`js\n${executed}\`\`\`` });
            }
            message.reply({ content: `\`\`\`js\n${executed}\`\`\`` });
        } catch(error) {
            message.reply({ content: `\`\`\`js\n${error}\`\`\`` });
        }
    }
});
