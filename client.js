const { isApplicationCommandDMInteraction } = require('discord-api-types/utils/v9');
const Discord = require('discord.js'),
    config = require('./config.json');
const { intersection } = require('zod');
const { ActionRowBuilder, ButtonBuilder, ButtonStyle, Events, SelectMenuBuilder, TextInputStyle, EmbedBuilder } = require('discord.js');
const { Client, GatewayIntentBits } = require('discord.js');                                     
const bot = new Client({ intents: [GatewayIntentBits.Guilds, GatewayIntentBits.GuildMessages, GatewayIntentBits.MessageContent, GatewayIntentBits.GuildMembers, GatewayIntentBits.GuildMessageReactions] });   
const { QuickDB } = require ("quick.db");
const db = new QuickDB (); 
const { ContextMenuCommandBuilder, ApplicationCommandType, TextInputBuilder } = require('discord.js');                            
const { channel } = require('diagnostics_channel');
const info = require('./package.json');
bot.login(config.token);                                                                         
                                                                                                 
bot                                                                                              
.on('ready', (Client)=>{                                                                         
    console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');

    bot.application.commands.create({
        name: 'health',
        description: '–ó–∞–¥–µ—Ä–∂–∫–∞ —Ö–æ—Å—Ç–∏–Ω–≥–∞ –∏ –ê–ü–ò –î–°',
        defaultPermission: true
    })

    bot.on('interactionCreate', interaction => {
        if (!interaction.isCommand()) return;

        if(interaction.commandName === 'health') {
            interaction.reply({
                embeds: [
                    {
                    title: "–°–æ—Å—Ç–æ—è–Ω–∏–µ",
                    description: `üèì–ó–∞–¥–µ—Ä–∂–∫–∞ —Ö–æ—Å—Ç–∏–Ω–≥–∞: ${Date.now() - interaction.createdTimestamp}–º—Å.\nüßµ–ó–∞–¥–µ—Ä–∂–∫–∞ API Discord: ${Math.round(bot.ws.ping)}–º—Å`,
                    color: 0xDC143C,
                    }
                ],
                ephemeral: false
            })
        }
    });

bot.application.commands.create({
    name: 'user-info',
    description: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –µ–≥–æ –∞–π–¥–∏ –∏ —Ä–æ–ª–∏',
    options: [
        {
            name: "another-user",
            description: "–í–≤–µ–¥–∏ –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —ç—Ç–æ –ø–æ–ª–µ",
            type: 9,
            required: false
        },
    ],
    defaultPermission: true
})

bot.on('interactionCreate', interaction => {
    if (!interaction.isCommand()) return;
    
    let user = interaction.options.getUser('user');
    let member = interaction.guild.members.cache.get(interaction.user.id);
    let roles = member.roles.cache.map(r => `${r}`).join(' , ');
    
    if(interaction.commandName === 'user-info') {
        interaction.reply({
            embeds: [
                {
                    title: "–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã",
                    description: `–¢–≤–æ–π —Ç–µ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${interaction.user.tag}\n–¢–≤–æ–π –∞–π–¥–∏: ${interaction.user.id}\n${roles}\n${member}\n${member.tag}`,
                    color: 0x7FFF00,
                    footer: {
                        text: "–ú–æ–∂–µ—à—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ–±–µ –Ω–∞ –ø–∞–º—è—Ç—å :)"
                    },
                }
            ],
            ephemeral: false
        })
    }
});

bot.application.commands.create({
    name: 'info',
    description: '–ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ',
    efaultPermission: true
})

bot.on('interactionCreate', interaction => {
    if (!interaction.isChatInputCommand()) return;

    if (interaction.commandName === 'info') {
        const row = new ActionRowBuilder()
        .addComponents(
            new ButtonBuilder()
            .setLabel('–°–µ—Ä–≤–µ—Ä –ø–æ–¥–¥–µ—Ä–∂–∫–∏')
            .setStyle(ButtonStyle.Link)
            .setURL(`https://discord.gg/zNPJRZZnMJ`),
        )
        .addComponents(
            new ButtonBuilder()
            .setLabel('–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –±–æ—Ç–∞‚ù§Ô∏è')
            .setStyle(ButtonStyle.Link)
            .setURL(`https://www.donationalerts.com/r/vlas_kozlov`), 
        )
        .addComponents(
            new ButtonBuilder()
            .setLabel('GitHub-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π')
            .setStyle(ButtonStyle.Link)
            .setURL(`https://github.com/vlaskozlov/Replier-Bot`),
        )

        interaction.reply({
            components: [row],
            embeds: [
                {
                    title: "–ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ",
                    description: `–ù–∞–∑–≤–∞–Ω–∏–µ –±–æ—Ç–∞: ${info.name}\n–í–µ—Ä—Å–∏—è –±–æ—Ç–∞: ${info.version}\n–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: ${info.description}\n–í–µ—Ä—Å–∏—è Discord.js: ${info.dependencies['discord.js']}`,
                    color: 0xFFD700,
                    footer: {
                        text: "–î–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∑–∞—Ö–æ–¥–∏—Ç–µ –Ω–∞ GitHub-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π (–∫–Ω–æ–ø–∫–∞ —Å–Ω–∏–∑—É).\n–î–ª—è –ø–æ–º–æ—â–∏ —Å –±–æ—Ç–æ–º –∑–∞—Ö–æ–¥–∏—Ç–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –ø–æ–¥–¥–µ—Ä–∂–∫–∏ (—Å–∏–Ω—è—è –∫–Ω–æ–ø–∫–∞).\n–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –±–æ—Ç–∞ –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏. ü§ó",
                    },
                },

            ],
            ephemeral: false
        })
    }
});

/*bot.on('interactionCreate', interaction => {
    if (!interaction.isButton()) return;
    if (interaction.customId === 'support') {
        interaction.reply({content: `–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Å—Ç–∞—Ä–∞–Ω–∏—è –∞–≤—Ç–æ—Ä–∞: https://www.donationalerts.com/r/vlas_kozlov `, ephemeral: false})
    } 
});*/ 

bot.application.commands.create({
    name: 'server-info',
    description: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ',
    defaultMemberPermission: true
})

bot.on('interactionCreate', async interaction => {
    if(!interaction.isCommand()) return;
    let guild = interaction.guild;
    const banner = await guild.bannerURL() || null;
    const icon = await guild.iconURL() || null
    const serverEmbed = new EmbedBuilder()
    .setColor(0x7FFF00)
    .setTitle(guild.name)
    .setDescription(guild.description)
    .setThumbnail(icon)
    .setFields(
        { name: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ", value: `${guild.memberCount}` },
        { name: "–í–ª–∞–¥–µ–ª–µ—Ü —Å–µ—Ä–≤–µ—Ä–∞", value: `<@${guild.ownerId}>` }
    )
    .setImage(banner)

    if(interaction.commandName === 'server-info') {
        interaction.reply({
            embeds: [serverEmbed],
            ephemeral: false
        })
    }
})

bot.application.commands.create({
    name: 'test-button',
    description: '–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∞ –∫–Ω–æ–ø–æ–∫',
    defaultPermission: true
})

bot.on('interactionCreate', interaction => {
    if (!interaction.isChatInputCommand()) return;

    if (interaction.commandName === 'test-button') {
        const row = new ActionRowBuilder()
        .addComponents(
            new ButtonBuilder()
            .setCustomId('primary')
            .setLabel('–ù–∞–∂–º–∏ –Ω–∞ –º–µ–Ω—è!')
            .setStyle(ButtonStyle.Primary),
        );

        interaction.reply({ content: '–Ø –¥—É–º–∞—é, —Ç–µ–±–µ –Ω–∞–¥–æ,', components: [row] });
    }

bot.on('interactionCreate', interaction => {
    if (!interaction.isButton()) return;
    if (interaction.customId === 'primary') {
    interaction.reply({content: '–ö–Ω–æ–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞–∂–∞—Ç–∞ :tada: '})
    ephemeral: true
}
})
});

bot.application.commands.create({
    name: 'test-menus',
    description: '–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∞ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞',
    defaultPermission: true
})

bot.on('interactionCreate', async interaction => {
    if (!interaction.isChatInputCommand()) return;

    if (interaction.commandName === 'test-menus') {
        const row = new ActionRowBuilder()
        .addComponents(
            new SelectMenuBuilder()
            .setCustomId('select')
            .setPlaceholder('–ù–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ')
            .addOptions(
                {
                    label: '–í—ã–±–µ—Ä–∏ –º–µ–Ω—è',
                    description: '–í—ã–±–µ—Ä–∏ –º–µ–Ω—è, –≤—ã–±–µ—Ä–∏ –º–µ–Ω—è –ø—Ç–∏—Ü–µ–π —Å—á–∞—Å—Ç—å—è –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è',
                    value: 'first_option',
                },
                {
                    label: '–ó–∞–≤–æ–¥ –ª–µ–≤–æ–π –∏ –ø—Ä–∞–≤–æ–π –ø–∞–ª–æ—á–∫–∏ –¢–≤–∏–∫—Å',
                    description: '–ê –∫–∞–∫–∞—è –ø–∞–ª–æ—á–∫–∞ –¢–≤–∏–∫—Å —Ç–µ–±–µ –ø–æ –¥—É—à–µ?',
                    value: 'second_option',
                },
                {
                    label: '–ü–µ—Ä–µ–¥ —Ç–æ–±–æ–π —Å—Ç—É–ª, –Ω–∞ –Ω—ë–º...',
                    description: '...',
                    value: 'third_option',
                },
                {
                    label: '–ü–∏–∫–∏ —Ç–æ—á—ë–Ω—ã–µ',
                    description: '...',
                    value: 'fourth_option',
                },
                {
                    label: '–ê –Ω–∞ –¥—Ä—É–≥–æ–º –ø–∏—Å—é–ª—è –¥—Ä–æ—á—ë–Ω–∞—è',
                    description: '–ß—Ç–æ –≤—ã–±–µ—Ä–µ—à—å —Ç—ã?',
                    value: 'fifth_option',
                },
            ),
        );
    await interaction.reply({ content: '–ö—Ä–∞—Å–Ω—ã–π –∏–ª–∏ —Å–∏–Ω–∏–π –ø—Ä–æ–≤–æ–¥?', components: [row] });
    }
})

bot.on(Events.InteractionCreate, async interaction => {
    if (!interaction.isSelectMenu()) return;

    const selected = interaction.values[0];

    if (selected === 'first_option') {
        await interaction.update(`${interaction.user.username}, —Ç—ã –≤—ã–±—Ä–∞–ª –ø—Ç–∏—Ü—É –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è!`);
    } else if (selected === 'second_option') {
       await interaction.update(`${interaction.user.username}, —Ç–µ–±–µ –Ω—Ä–∞–≤—è—Ç—Å—è –æ–±–µ –ø–∞–ª–æ—á–∫–∏ —Ç–≤–∏–∫—Å. –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!`);
    } else if (selected === 'third_option') {
        await interaction.update(`${interaction.user.username}, —ç—Ç–æ –Ω–µ –≤—ã–±–æ—Ä, –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∏–∂–µ.`);
    } else if (selected === 'fourth_option') {
        await interaction.update(`${interaction.user.username}, —Ç—ã –≤—ã–±—Ä–∞–ª –ø–∏–∫–∏. –¢–µ–±—è –∑–∞—Ä–µ–∑–∞–ª–∏ –¥–æ –ø–æ—Ç–µ—Ä–∏ —Å–æ–∑–Ω–∞–Ω–∏—èüíÄ`);
    } else if (selected === 'fifth_option') {
        await interaction.update(`${interaction.user.username}, —Ç—ã –≤—ã–±—Ä–∞–ª –ø–∏—Å—é–ª—é –¥—Ä–æ—á—ë–Ω—É—é. –¢–≤–æ–π –∞–Ω—É—Å —Ä–∞—Å—à–∏—Ä–∏–ª—Å—è –Ω–∞ 20—Å–º. ||–£ —Ä–∞–∑—Ä–∞–±–æ–≤ –±–æ—Ç–æ–≤ –Ω–∞ –î–ñ–° —Ç–∞–∫–æ–µ-–∂–µ –¥—É–ø–ª–æüòâ||`);
    }

});

bot.application.commands.create({
    name: 'test-modals',
    description: '–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∞ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω',
    defaultPermission: true
})

const { ModalBuilder } = require('discord.js');

bot.on(Events.InteractionCreate, async interaction => {
    if (!interaction.isChatInputCommand()) return;

    if (interaction.commandName === 'test-modals') {
        const modal = new ModalBuilder()
        .setCustomId('myModal')
        .setTitle('–û–∫–æ—à–∫–æ-–ª—É–∫–æ—à–∫–æ');

        const favoriteColorInput = new TextInputBuilder()
        .setCustomId('favoriteColorInput')
        .setLabel("–ö–∞–∫–æ–π —Ü–≤–µ—Ç —Ç–µ–±–µ –ø–æ –¥—É—à–µ?")
        .setStyle(TextInputStyle.Short);

        const hobbiesInput = new TextInputBuilder()
        .setCustomId('hobbiesInput')
        .setLabel("–ö–∞–∫–æ–µ —Ç–≤–æ—ë –ª—é–±–∏–º–æ–µ —Ö–æ–±–±–∏?")
        .setStyle(TextInputStyle.Paragraph);

        const firstActionRow = new ActionRowBuilder().addComponents(favoriteColorInput);
        const secondActionRow = new ActionRowBuilder().addComponents(hobbiesInput);

        modal.addComponents(firstActionRow, secondActionRow);

        await interaction.showModal(modal);
    }
})

bot.on(Events.InteractionCreate, async interaction => {
    if (!interaction.isModalSubmit()) return;
    if (interaction.customId === 'myModal') {
        await interaction.reply({ content: '–í–∞—à –æ—Ç–≤–µ—Ç –±—ã–ª —É—Å–ø—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!' });
    }
})

bot.on(Events.InteractionCreate, async interaction => {
    if (!interaction.isModalSubmit()) return;
    
    const favoriteColor = interaction.fields.getTextInputValue('favoriteColorInput');
    const hobbies = interaction.fields.getTextInputValue('hobbiesInput');
    console.log(`–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã test-modals\n–û—Ç–≤–µ—Ç—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${interaction.user.username}\n–õ—é–±–∏–º—ã–π —Ü–≤–µ—Ç: ${favoriteColor}, –ª—é–±–∏–º–æ–µ —Ö–æ–±–±–∏: ${hobbies}`);
});

})
    




.on('messageCreate', async (message) => {
    if(message.author.bot) return;

    if(message.content == "—Ç–µ—Å—Ç") {
        message.channel.send({
            content: "–ï—Å–ª–∏ —è —ç—Ç–æ –ø–∏—à—É, —Ç–æ —è –Ω–µ —É–º–µ—Ä. –£–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ :tada:"
        });
    } 
    else if(message.content.split(' ')[0] == '!eval') {
        if (!['521275527936606208', '853937919601016833', '663378999103324180'].includes(message.author.id)) return;
        const util = require('util');
        let code = message.content.split(' ').splice(1).join(' ') || null;
        let isAsync = false;

        try {
            if(!code) return message.reply({ content: '–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å!', ephemeral: true });
            code = code.replace(/(```(.+)?)?/g, '');
            if(code.includes('await')) isAsync = true;
            if(isAsync) code = `(async () => {${code}})()`;
            let executed = eval(code);
            if(util.types.isPromise(executed)) executed = await executed;
            if(typeof executed !== 'string') executed = util.inspect(executed, { depth: 0, maxArrayLength: null });
            if(executed.length >= 1940) {
                message.reply({ content: '–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–∫–∞–∑–∞–ª—Å—è —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–º, –ø–æ—ç—Ç–æ–º—É —è –æ—Ç–ø—Ä–∞–≤–∏–ª –µ–≥–æ —Ç–µ–±–µ –≤ –ª–∏—á–∫—É.' });
                return message.author.send({ content: `\`\`\`js\n${executed}\`\`\`` });
            }
            message.reply({ content: `\`\`\`js\n${executed}\`\`\`` });
        } catch(error) {
            message.reply({ content: `\`\`\`js\n${error}\`\`\`` });
        }
    }
});